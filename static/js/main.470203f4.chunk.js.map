{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","readFileAsync","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","countChars","fileContents","charMap","split","forEach","c","toLowerCase","match","undefined","getCharInfoAndEntropy","probMap","entropy","size","Object","values","reduce","a","b","entries","char","prob","Math","log","getPairsEntropy","charProbs","pairCount","replace","length","i","fChar","sChar","pair","pairEntropy","pairProb","log2","App","props","openFile","refs","files","rawFile","arrayBuffer","text","TextDecoder","decode","charInfo","setState","fileEntropy","state","className","id","type","ref","onClick","this","toFixed","keys","sort","map","key","React","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.470203f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      charInfo: {},\n      fileEntropy: 0,\n      pairEntropy: 0,\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div>\n          <div id=\"json-file-loader\">\n            <input type=\"file\" ref=\"file\" />\n            <button onClick={this.openFile}>Load File</button>\n          </div>\n          <p>Total File Entropy: {this.state.fileEntropy.toFixed(4)}</p>\n          <p>Entropy H*: {this.state.pairEntropy.toFixed(4)}</p>\n        </div>\n          <table className=\"table\">\n            <tbody>\n              <tr><th>Char</th><th>Prob</th><th>Entropy</th></tr>\n              { Object.keys(this.state.charInfo).sort().map((key) => (<tr><td>{key}</td><td>{this.state.charInfo[key][0].toFixed(4)}</td><td>{this.state.charInfo[key][1].toFixed(4)}</td></tr>)) }\n        </tbody>\n      </table>\n    </div>\n      </div>\n    );\n  }\n\n  openFile = async () => {\n    const rawFile = await readFileAsync(this.refs.file.files[0]);\n    const text = arrayBufferToString(rawFile);\n    const charMap = countChars(text);\n    const [charInfo, entropy] = getCharInfoAndEntropy(charMap);\n    const pairEntropy = getPairsEntropy(text, charInfo);\n    this.setState({ charInfo : charInfo, fileEntropy : entropy, pairEntropy : pairEntropy });\n  }\n}\n\nfunction readFileAsync(file) {\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsArrayBuffer(file);\n  });\n}\n\nfunction arrayBufferToString(arrayBuffer) {\n  return new TextDecoder('utf-8').decode(arrayBuffer);\n}\n\nfunction countChars(fileContents) {\n  var charMap = {};\n  fileContents.split(\"\").forEach(c => {\n    c = c.toLowerCase();\n    if (!c.match(/[a-z0-9]/i) && c !== \" \")\n      c = '.';\n    if (c == \"\\n\")\n      return;\n    if (charMap[c] !== undefined)\n      charMap[c]++;\n    else\n      charMap[c] = 1;\n  });\n  return charMap;\n}\n\nfunction getCharInfoAndEntropy(charMap) {\n  var probMap = {};\n  var entropy = 0;\n  const size = Object.values(charMap).reduce((a, b) => a + b, 0);\n  Object.entries(charMap).forEach(([char, frequency]) => {\n    var prob = frequency / size;\n    probMap[char] = [prob, Math.log(1 / prob)];\n    entropy -= prob * Math.log(prob);\n  });\n  return [probMap, entropy];\n}\n\nfunction getPairsEntropy(fileContents, charProbs) {\n  fileContents = fileContents.replace(\"\\n\", \"\").toLowerCase();\n  var pairCount = {};\n  const size = fileContents.length - 1;\n  for (var i = 0; i < size; i++) {\n    var fChar = fileContents[i];\n    var sChar = fileContents[i+1];\n    if (!fChar.match(/[a-z0-9]/i) && fChar !== \" \") fChar = \".\";\n    if (!sChar.match(/[a-z0-9]/i) && sChar !== \" \") sChar = \".\";\n    var pair = fChar + sChar;\n    if (pairCount[pair] === undefined)\n      pairCount[pair] = 1;\n    else\n      pairCount[pair] += 1;\n  }\n  var pairEntropy = 0;\n  Object.entries(pairCount).forEach(([pair, frequency]) => {\n    var pairProb = frequency / size;\n    pairEntropy -= pairProb * charProbs[pair[1]][0] * Math.log2(pairProb);\n  });\n  return pairEntropy;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}